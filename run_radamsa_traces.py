import os, signal
import sys
import multiprocessing
import subprocess

import utils.Operations.Operations as op
     

'''
#Initializing
#mkdir for core_index: outcome_1. 
#if outcome_1 not exists
#    mkdir:outcome_1/out, outcome_1/err
'''
def init_process(core_index, test_path):
    outcomes_path = "%s/outcomes-%d" % (test_path, core_index)
    dir_existed = op.mkdir(outcomes_path)
    
    if dir_existed:
        op.mkdir("%s/out" % outcomes_path)
        op.mkdir("%s/err" % outcomes_path)
    else:
        print("%s already exists" % outcomes_path)# can be removed
        #rmdir("%s/out" % outcomes_path)
        #TODO: without cleaning existed files, newly generated files will overwrite old ones.

'''
Fuzzing:
Run cmd line to generate mutated outputs.
Save outputs as outcome_*/out/id_*;timestampe_*
@param: fuzzer_name and other option
'''
def fuzzing_process(core_index, test_path, fuzzer_path, mutation_num, seed_path):
    outcomes_path = "%s/outcomes-%d" % (test_path, core_index)
    fuzzer_run_cmd = "%s -o %s/out/id_%s -n %d %s" % (fuzzer_path,outcomes_path, "%n", mutation_num, seed_path)
    fuzzer_return = op.run_cmd(fuzzer_run_cmd)

'''
Testing:
Use outputs generated by the fuzzer to test the program cxxfilt.
@param: testing program_name
'''
def testing_process(input_path, input_index,core_index,test_path, program_path):
    outcomes_path = "%s/outcomes-%d" % (test_path, core_index)
    test_cmd = "%s < %s/id_%d" % (program_path, input_path, input_index)
    test_return = op.run_cmd(test_cmd)
    
    test_out, test_err = test_return.communicate()
    
    #If the input crashes the program, copy it to err/ dir.
    if test_err:
          print("ERROR %d" % input_index)
          print(test_err)
          input_source = "%s/id_%d" % (input_path, input_index)
          err_destination = "%s/err/id_%d;timestamp_%s" % (outcomes_path,input_index, op.get_now_timestamp())
          op.copyfile(input_source, err_destination)

'''
Run the fuzzing&testing subprocess:
Initialization, fuzzing, testing.
'''
def run_radamsa_subprocess(core_index, test_path, program_path, fuzzer_path, seed_path, mutation_num):
    
     test_input_path = "%s/outcomes-%d/out" % (test_path, core_index)
    
     while True:
          init_process(core_index,test_path)
          fuzzing_process(core_index, test_path, fuzzer_path, mutation_num, seed_path)
          
          for index in range(1, mutation_num + 1):
              
              testing_process(test_input_path, index, core_index, test_path,program_path)

'''
Wrapper for run_radamsa_subprocess, can kill a process after timeout.
Timeout is implemented as an alarm.
'''
def run_fuzzer_with_alarm(core_index, test_path, program_path, fuzzer_path, seed_path, mutation_num, timeout):
    try:
        signal.signal(signal.SIGALRM,handler)
        signal.alarm(timeout)
        run_radamsa_subprocess(core_index, test_path, program_path, fuzzer_path, seed_path, mutation_num)
    except Exception as e:
        print(e)
    finally: 
        signal.alarm(0)
    print("Alarm wrapper for run_fuzzer_subprocess # %d ends" % core_index)  #alarm ends
     
     
'''
Use an alarm to control when to kill a process.
Work inside a process.
'''
def handler(signum, frame):
    raise Exception("timeout...") #when the alarm ends, call handler.

'''
Use multiprocessing.Pool to run several processes at the same time.
@param:
indexlist: a list of core index
cores: how many cores are used.
'''
def parallel_run_radamsa_with_timeout (indexlist, cores, test_path, program_path, fuzzer_path, seed_path, mutation_num, timeout):
    pool= multiprocessing.Pool(cores)
    try:
        for i in indexlist:
            pool.apply_async(func = run_fuzzer_with_alarm, args = (i,test_path, program_path, fuzzer_path, seed_path, mutation_num, timeout,))
    except Exception as e:
        print(e)
    pool.close()
    pool.join()
   

#Manually check the invalid output:
#/home/zenong/binutils_gdb/Benchmark_script/program_files/1_371517f576f8e7b25fc228c7459d6865c13d524/binutils/cxxfilt < /home/demideng/72h-cxxfilt-radamsa/err/outcomes_3/invalid_output_1


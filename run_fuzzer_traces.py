import os
import multiprocessing
import datetime
import shutil
import subprocess

from utils.Config.Config import Config
from utils.GetFunctions.GetFunctions import get_range


def run_cmd(cmd):
    
    p = subprocess.Popen(cmd, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    return p

'''
Run fuzzer:
1. Clean the output directory.
2. Choose the fuzzer based on fuzzer name input by the user.
3. Read arguments for the fuzzer.(TODO)
4. Run the fuzzer. output name format: id:index
'''
def run_fuzzer_subprocess(fuzzer_name):

    if fuzzer_name == "radamsa":
    
        rm_cmd = "rm -f %s/out/*" % (test_path)
        rm_return = run_cmd(rm_cmd) # the variable will not be used.
        
        fuzzer_run_cmd = "%s -o %s/%s%s -n %d %s" % (fuzzer_path, output_path, output_name,"%n", mutation_num, seed_path)
        fuzzer_return = run_cmd(fuzzer_run_cmd)

'''
Remove duplicates in output dir.
TODO
'''


'''
NOT IN USE
Run the testing program:
1. Choose the program to be tested.
2. Run the program with outputs generated by fuzzers.
3. Determine the validity of an output based on the result of running the program.
'''
def run_program_test(program_path, program_name):
    if program_name == "cxxfilt":
        for index in range(1, mutation_num + 1):
            test_cmd = "%s < %s/%s%d" % (program_path, output_path, output_name, index)
            test_return = run_cmd(test_cmd)
            
            outs,errs = test_return.communicate()
            if errs:
                copy_cmd = "cp %s/%s%d %s" % (output_path, output_name, index, err_path)
                copy_return = run_cmd(copy_cmd)
                print(errs)
            
                
            #TODO: determine the validity of an output based on the return value of run_cmd, copy any outputs that lead to an error in testing program.

def run_fuzzer_test(fuzzer_name):

    if fuzzer_name == "radamsa":
    
        #rm_cmd = "rm -f %s/out/*" % (test_path)
        #rm_return = run_cmd(rm_cmd) # the variable will not be used.
        
        fuzzer_run_cmd = "%s  -n %d %s" % (fuzzer_path, mutation_num, seed_path)
       #print(fuzzer_run_cmd)
    
        fuzzer_return = run_cmd(fuzzer_run_cmd)
        outs, errs = fuzzer_return.communicate()
        
        
        i = 0
        
        for output in outs.split(b"\n"):
            test_cmd = "%s %s" % (program_path, output)
            test_return = run_cmd(test_cmd)
            
            test_out, test_err = test_return.communicate()
            
            if test_err:
                i+=1
                print("ERROR %d" % i)

          
      
'''
main:
1. Read arguments from the config file.
2. Multiprocessing run fuzzer, run testing program, decide the outputs
3. Output file format, name

test path: /home/demideng/72h-cxxfilt-radamsa  (timeout-testProgram-fuzzerName)
program path:/home/zenong/binutils_gdb/Benchmark_script/program_files/1_371517f576f8e7b25fc228c7459d6865c13d524/binutils/cxxfilt
fuzzer path: /home/zenong/radamsa/bin/radamsa
seed path: /home/demideng/72h-cxxfilt-radamsa/seed/radamsa (test path/seed/fuzzerName)
'''
test_path = "/home/demideng/72h-cxxfilt-radamsa"
program_path = "/home/zenong/binutils_gdb/Benchmark_script/program_files/1_371517f576f8e7b25fc228c7459d6865c13d524/binutils/cxxfilt"
fuzzer_path = "/home/zenong/radamsa/bin/radamsa"
seed_path = "/home/demideng/72h-cxxfilt-radamsa/seed/radamsa/sample-4"
output_path = "%s/out" % (test_path)
mutation_num = 100
output_name = "id:"
err_path = "/home/demideng/72h-cxxfilt-radamsa/err/"


if __name__ == "__main__":
  run_fuzzer_test("radamsa")
    #run_fuzzer_subprocess("radamsa")
    #run_program_test(program_path, "cxxfilt")
            
